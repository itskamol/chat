version: '3.8'

services:
    mongodb:
        image: mongo:latest
        container_name: mongodb_container
        restart: unless-stopped
        logging:
            driver: none # Agar muammo bo'lsa, loglarni ko'rish uchun buni olib tashlang yoki 'json-file' ga o'zgartiring
        # ports:
        #     - '27017:27017' # Lokal test uchun kerak bo'lsa oching
        volumes:
            - mongo-data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: password
        networks:
            - microservices-network
        healthcheck:
            # MongoDB 6+ versiyalari uchun `mongosh` dan foydalaning.
            # Eski versiyalar uchun `mongo --eval 'db.runCommand("ping").ok'`
            test: |
                mongosh --host localhost --port 27017 --eval \
                'db.runCommand("ping").ok' || exit 1
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s # Konteyner ishga tushgandan keyin healthcheck boshlanishidan oldin kutish vaqti

    rabbitmq:
        image: rabbitmq:management
        container_name: rabbitmq_container
        restart: unless-stopped
        logging:
            driver: none # Agar muammo bo'lsa, loglarni ko'rish uchun buni olib tashlang yoki 'json-file' ga o'zgartiring
        # ports:
        #     - '5672:5672'  # Lokal test uchun kerak bo'lsa oching
        #     - '15672:15672' # RabbitMQ Management UI uchun
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        networks:
            - microservices-network
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    user:
        build:
            context: ./user-service
            dockerfile: Dockerfile
        container_name: user_service_container
        restart: always
        ports:
            - '8081:8081'
        depends_on:
            mongodb:
                condition: service_healthy # MongoDB tayyor bo'lguncha kutadi
            rabbitmq:
                condition: service_healthy # RabbitMQ tayyor bo'lguncha kutadi
        environment:
            NODE_ENV: production
            MONGO_URI: mongodb://root:password@mongodb:27017/user-service-db?authSource=admin
            MESSAGE_BROKER_URL: amqp://guest:guest@rabbitmq:5672
            JWT_SECRET: mening_juda_maxfiy_kalitim_12345
        networks:
            - microservices-network

    chat:
        build:
            context: ./chat-service
            dockerfile: Dockerfile
        container_name: chat_service_container
        restart: always
        ports:
            - '8082:8082'
        depends_on:
            mongodb:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_ENV: production
            PORT: 8082 # Bu environment qatori takrorlangan edi, bittasini qoldirdim
            MONGO_URI: mongodb://root:password@mongodb:27017/chat-service-db?authSource=admin
            MESSAGE_BROKER_URL: amqp://guest:guest@rabbitmq:5672
            JWT_SECRET: mening_juda_maxfiy_kalitim_12345
        networks:
            - microservices-network

    notification:
        build:
            context: ./notification-service
            dockerfile: Dockerfile
        container_name: notification_service_container
        restart: always
        ports:
            - '8083:8083'
        depends_on:
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_ENV: production
            MESSAGE_BROKER_URL: amqp://guest:guest@rabbitmq:5672
            SMTP_HOST: smtp-relay.brevo.com
            SMTP_PORT: 587
            SMTP_USER: mening_brevo_account_emailim@example.com
            SMTP_PASS: mening_brevo_master_passwordim
            EMAIL_FROM: chat-server@meningdomenim.com
            SENDINBLUE_APIKEY: mening_brevo_api_kalitim
        networks:
            - microservices-network

    gateway:
        build:
            context: ./gateway
            dockerfile: Dockerfile
        container_name: api_gateway_container
        restart: always
        ports:
            - '8080:8080'
        depends_on:
            - user
            - chat
            - notification
        environment:
            PORT: 8080
        networks:
            - microservices-network

    ui:
        build:
            context: ./ui
            dockerfile: Dockerfile
        container_name: ui_container
        ports:
            - '3000:3000'
        restart: always
        depends_on:
            - gateway
            - chat # UI chat servisiga to'g'ridan-to'g'ri WS orqali ulanishi mumkin
        environment:
            # Docker network ichida gateway container nomi ishlatiladi
            NEXT_PUBLIC_API_BASE_URL: http://localhost/api
            NEXT_PUBLIC_WS_URL: ws://localhost/ws
        networks:
            - microservices-network
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        container_name: nginx_container
        restart: always
        ports:
            - '80:80'
            # - '443:443' # SSL uchun (keyinchalik)
        depends_on:
            - gateway
            # - ui
            - chat
        networks:
            - microservices-network

    media_server:
        build:
            context: ./media-server
            dockerfile: Dockerfile
        container_name: media_server_container
        restart: always
        ports:
            - '3001:3001' # As per media-server/src/config.ts (default)
            # Mediasoup RTP ports (UDP) - These need to be open on the host
            # and match MEDIASOUP_RTP_MIN_PORT and MEDIASOUP_RTP_MAX_PORT
            - '20000-20020:20000-20020/udp'
        networks:
            - microservices-network
        environment:
            PORT: 3001
            MEDIASOUP_LISTEN_IP: 0.0.0.0
            # MEDIASOUP_ANNOUNCED_IP should be the IP address of the host machine accessible by clients.
            # For local development, 127.0.0.1 or host's LAN IP. In production, public IP.
            # This can also be the IP of Nginx if traffic is routed through it (more complex setup).
            MEDIASOUP_ANNOUNCED_IP: 127.0.0.1 # Placeholder, adjust as needed
            MEDIASOUP_RTP_MIN_PORT: 20000 # Renamed from MEDIASOUP_RTC_MIN_PORT for clarity
            MEDIASOUP_RTP_MAX_PORT: 20020 # Renamed from MEDIASOUP_RTC_MAX_PORT for clarity
            DEBUG: mediasoup:* # Enable mediasoup logs
        # volumes:
            # - ./media-server-logs:/opt/media-server/logs # Optional: if your app logs to a file
        # depends_on: # Add if media-server relies on other services at startup
            # - rabbitmq

    turn_server:
        image: coturn/coturn
        container_name: coturn_container
        restart: always
        networks:
            - microservices-network
        ports:
            - '3478:3478/tcp'
            - '3478:3478/udp'
            - '5349:5349/tcp' # TURN/TLS
            - '5349:5349/udp' # TURN/DTLS
            # Relay ports for media. Coturn's default is 49152-65535.
            # If you want to restrict it, uncomment and set min-port/max-port in turnserver.conf
            # and map them here. For now, we rely on coturn's default or what's in its config.
            # Example: - '49152-49200:49152-49200/udp'
        volumes:
            - ./turn_config/turnserver.conf:/etc/coturn/turnserver.conf:ro
        # The coturn image uses the config file by default.
        # Environment variables can override some settings if the image supports it,
        # but for a full config, the file mount is standard.
        # The command can be used to pass additional CLI args to coturn, e.g., for logging.
        # command: "-L stdout" # Example to force log to stdout if not default
        healthcheck:
            # Coturn doesn't have a simple TCP ping healthcheck by default.
            # A simple check could be to see if the process is running.
            # For a more robust check, a custom script or tool would be needed to test STUN/TURN functionality.
            test: ["CMD-SHELL", "netstat -tulnp | grep 3478 || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 20s

volumes:
    mongo-data:

networks:
    microservices-network:
        driver: bridge
