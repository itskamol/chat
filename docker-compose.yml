version: '3.8'

services:
    mongodb:
        image: mongo:latest
        container_name: mongodb_container
        restart: unless-stopped
        logging:
            driver: none # Agar muammo bo'lsa, loglarni ko'rish uchun buni olib tashlang yoki 'json-file' ga o'zgartiring
        # ports:
        #     - '27017:27017' # Lokal test uchun kerak bo'lsa oching
        volumes:
            - mongo-data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: password
        networks:
            - microservices-network
        healthcheck:
            # MongoDB 6+ versiyalari uchun `mongosh` dan foydalaning.
            # Eski versiyalar uchun `mongo --eval 'db.runCommand("ping").ok'`
            test: |
                mongosh --host localhost --port 27017 --eval \
                'db.runCommand("ping").ok' || exit 1
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s # Konteyner ishga tushgandan keyin healthcheck boshlanishidan oldin kutish vaqti

    rabbitmq:
        image: rabbitmq:management
        container_name: rabbitmq_container
        restart: unless-stopped
        logging:
            driver: none # Agar muammo bo'lsa, loglarni ko'rish uchun buni olib tashlang yoki 'json-file' ga o'zgartiring
        # ports:
        #     - '5672:5672'  # Lokal test uchun kerak bo'lsa oching
        #     - '15672:15672' # RabbitMQ Management UI uchun
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        networks:
            - microservices-network
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    user:
        build:
            context: ./user-service
            dockerfile: Dockerfile
        container_name: user_service_container
        restart: always
        ports:
            - '8081:8081'
        depends_on:
            mongodb:
                condition: service_healthy # MongoDB tayyor bo'lguncha kutadi
            rabbitmq:
                condition: service_healthy # RabbitMQ tayyor bo'lguncha kutadi
        environment:
            NODE_ENV: production
            MONGO_URI: mongodb://root:password@mongodb:27017/user-service-db?authSource=admin
            MESSAGE_BROKER_URL: amqp://guest:guest@rabbitmq:5672
            JWT_SECRET: mening_juda_maxfiy_kalitim_12345
        networks:
            - microservices-network

    chat:
        build:
            context: ./chat-service
            dockerfile: Dockerfile
        container_name: chat_service_container
        restart: always
        ports:
            - '8082:8082'
        depends_on:
            mongodb:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_ENV: production
            PORT: 8082 # Bu environment qatori takrorlangan edi, bittasini qoldirdim
            MONGO_URI: mongodb://root:password@mongodb:27017/chat-service-db?authSource=admin
            MESSAGE_BROKER_URL: amqp://guest:guest@rabbitmq:5672
            JWT_SECRET: mening_juda_maxfiy_kalitim_12345
        networks:
            - microservices-network

    notification:
        build:
            context: ./notification-service
            dockerfile: Dockerfile
        container_name: notification_service_container
        restart: always
        ports:
            - '8083:8083'
        depends_on:
            rabbitmq:
                condition: service_healthy
        environment:
            NODE_ENV: production
            MESSAGE_BROKER_URL: amqp://guest:guest@rabbitmq:5672
            SMTP_HOST: smtp-relay.brevo.com
            SMTP_PORT: 587
            SMTP_USER: mening_brevo_account_emailim@example.com
            SMTP_PASS: mening_brevo_master_passwordim
            EMAIL_FROM: chat-server@meningdomenim.com
            SENDINBLUE_APIKEY: mening_brevo_api_kalitim
        networks:
            - microservices-network

    gateway:
        build:
            context: ./gateway
            dockerfile: Dockerfile
        container_name: api_gateway_container
        restart: always
        ports:
            - '8080:8080'
        depends_on:
            - user
            - chat
            - notification
        environment:
            PORT: 8080
        networks:
            - microservices-network

    ui:
        build:
            context: ./ui
            dockerfile: Dockerfile
        container_name: ui_container
        ports:
            - '3000:3000'
        restart: always
        depends_on:
            - gateway
            - chat # UI chat servisiga to'g'ridan-to'g'ri WS orqali ulanishi mumkin
        environment:
            # Docker network ichida gateway container nomi ishlatiladi
            NEXT_PUBLIC_API_BASE_URL: http://localhost/api
            NEXT_PUBLIC_WS_URL: ws://localhost/ws
        networks:
            - microservices-network
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        container_name: nginx_container
        restart: always
        ports:
            - '80:80'
            # - '443:443' # SSL uchun (keyinchalik)
        depends_on:
            - gateway
            # - ui
            - chat
        networks:
            - microservices-network

volumes:
    mongo-data:

networks:
    microservices-network:
        driver: bridge
