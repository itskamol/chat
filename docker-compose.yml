version: '3.8'

x-logging: &logging
  logging:
    driver: none # Loglarni ko'rish uchun "json-file" ga o'zgartiring yoki olib tashlang

x-node-service-defaults: &node-service-defaults
  build:
    context: . # Monorepo root
    # dockerfile va args har bir servisda alohida ko'rsatiladi
  restart: always
  networks:
    - microservices-network
  volumes:
    # SERVICE_CODE_PATH va SERVICE_PACKAGE_NAME har bir servisda alohida o'rnatiladi
    # - ./SERVICE_CODE_PATH:/usr/src/app # Bu o'rniga har bir servisda aniq yo'l
    - ./packages/shared:/usr/src/app/node_modules/@chat/shared # @chat/shared uchun umumiy
    - /usr/src/app/node_modules # Har bir servisning o'z node_modules ini saqlash uchun
  working_dir: /usr/src/app # Dockerfile dagi WORKDIR bilan bir xil
  command: pnpm run dev # Mahalliy ishlab chiqish uchun standart buyruq
  environment:
    NODE_ENV: development
    CHOKIDAR_USEPOLLING: "true" # Nodemon uchun fayl o'zgarishlarini yaxshiroq kuzatish

services:
  mongodb:
    <<: *logging
    image: mongo:latest
    container_name: mongodb_container
    restart: unless-stopped
    ports:
      - '27017:27017' # Mahalliy ulanish uchun ochamiz
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - microservices-network
    healthcheck:
      test: |
        mongosh --host localhost --port 27017 --eval \
        'db.runCommand("ping").ok' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  rabbitmq:
    <<: *logging
    image: rabbitmq:management
    container_name: rabbitmq_container
    restart: unless-stopped
    ports:
      - '5672:5672'
      - '15672:15672' # RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  user:
    <<: *node-service-defaults # Umumiy sozlamalarni meros qilib oladi
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
      args: # Dockerfile dagi ARG larni o'rnatish
        SERVICE_NAME: "@chat/user-service"
        SERVICE_PATH: "services/user-service"
    container_name: user_service_container
    ports:
      - '8081:8081' # Dockerfile dagi EXPOSE portiga mos kelishi kerak
    depends_on:
      mongodb: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    volumes: # Umumiy volumes ni kengaytiramiz
      - ./services/user-service:/usr/src/app # User-service kodini mount qilish
      - ./packages/shared:/usr/src/app/node_modules/@chat/shared # Bu x-node-service-defaults da bor, lekin aniqlik uchun
      - /usr/src/app/node_modules # Bu ham x-node-service-defaults da bor
    env_file:
      - .env.docker # Umumiy Docker sozlamalari
      - ./services/user-service/env/.env.docker # User service uchun maxsus sozlamalar
    environment:
      NODE_ENV: development # env_file dagi qiymatlarni ustidan yozish yoki to'ldirish

  chat:
    <<: *node-service-defaults
    build:
      context: .
      dockerfile: ./services/chat-service/Dockerfile
      args:
        SERVICE_NAME: "@chat/chat-service"
        SERVICE_PATH: "services/chat-service"
    container_name: chat_service_container
    ports:
      - '8082:8082'
    depends_on:
      mongodb: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      file: { condition: service_started } # Yoki service_healthy
    volumes:
      - ./services/chat-service:/usr/src/app
      - ./packages/shared:/usr/src/app/node_modules/@chat/shared
      - /usr/src/app/node_modules
    env_file:
      - .env.docker # Umumiy Docker sozlamalari
      - ./services/chat-service/env/.env.docker # Chat service uchun maxsus sozlamalar
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      PORT: 8082

  file:
    <<: *node-service-defaults
    build:
      context: .
      dockerfile: ./services/file-service/Dockerfile
      args:
        SERVICE_NAME: "@chat/file-service" # package.json ga moslang
        SERVICE_PATH: "services/file-service"
    container_name: file_service_container
    ports:
      - "3001:3001"
    volumes:
      - ./services/file-service:/usr/src/app
      # Agar file-service @chat/shared ni ishlatsa:
      - ./packages/shared:/usr/src/app/node_modules/@chat/shared
      - /usr/src/app/node_modules
    env_file:
      - .env.docker # Umumiy Docker sozlamalari
      - ./services/file-service/env/.env.docker # File service uchun maxsus sozlamalar
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      PORT: 3001

  notification:
    <<: *node-service-defaults
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
      args:
        SERVICE_NAME: "@chat/notification-service" # package.json ga moslang
        SERVICE_PATH: "services/notification-service"
    container_name: notification_service_container
    ports:
      - '8083:8083'
    depends_on:
      rabbitmq: { condition: service_healthy }
    volumes:
      - ./services/notification-service:/usr/src/app
      # Agar notification-service @chat/shared ni ishlatsa:
      - ./packages/shared:/usr/src/app/node_modules/@chat/shared
      - /usr/src/app/node_modules
    env_file:
      - .env.docker # Umumiy Docker sozlamalari
      - ./services/notification-service/env/.env.docker # Notification service uchun maxsus sozlamalar
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      PORT: 8083

  gateway:
    # Gateway uchun alohida sozlamalar, agar u Node.js va pnpm workspace qismi bo'lsa,
    # <<: *node-service-defaults dan foydalanish mumkin
    build:
      context: . # Use root context like other services
      dockerfile: ./gateway/Dockerfile # ./gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    volumes: # Agar gateway kodini live-reload qilish kerak bo'lsa
      - ./gateway:/usr/src/app
      # Agar gateway @chat/shared ni ishlatsa:
      # - ./packages/shared:/usr/src/app/node_modules/@chat/shared
      # - /usr/src/app/node_modules
    # working_dir va command ni gateway ning ehtiyojlariga moslang
    env_file:
      - .env.docker # Umumiy Docker sozlamalari
      - ./gateway/env/.env.docker # Gateway uchun maxsus sozlamalar
    environment:
      NODE_ENV: development # Yoki production
      GATEWAY_PORT: 8080
    depends_on:
      - user
      - chat
      - file
      - notification
      - media_server # Gateway media_server ga bog'liq bo'lsa
    networks:
      - microservices-network
    restart: unless-stopped

  ui:
    build:
      context: . # Use root context like other services
      dockerfile: ./ui/Dockerfile
    container_name: ui_container
    ports:
      - "3000:3000"
    volumes:
      - ./ui:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - .env.docker # Umumiy Docker sozlamalari
      - ./ui/env/.env.docker # UI uchun maxsus sozlamalar
    environment:
      NODE_ENV: development
      PORT: 3000
    depends_on:
      - gateway
    networks:
      - microservices-network
    restart: unless-stopped

  nginx:
    # <<: *logging # Agar kerak bo'lsa
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx_container
    restart: always
    ports:
      - '80:80'
    depends_on:
      - gateway
      - chat # WebSocket uchun to'g'ridan-to'g'ri ulanish bo'lsa
    networks:
      - microservices-network

  media_server:
    # <<: *logging # Agar kerak bo'lsa
    build:
      context: . # Use root context like other services
      dockerfile: ./services/media-service/Dockerfile
    container_name: media_server_container
    restart: always
    ports:
      - '3002:3001' # Host portini o'zgartirdik (file-service bilan to'qnashmasligi uchun)
      - '20000-20020:20000-20020/udp'
    volumes: # Agar media-service kodini live-reload qilish kerak bo'lsa va monorepo qismi bo'lsa
      - ./services/media-service:/usr/src/app
      # Agar media-service @chat/shared ni ishlatsa:
      # - ./packages/shared:/usr/src/app/node_modules/@chat/shared
      # - /usr/src/app/node_modules
    # working_dir va command ni media-service ehtiyojlariga moslang
    env_file:
      - .env.docker # Umumiy Docker sozlamalari
      - ./services/media-service/env/.env.docker # Media server uchun maxsus sozlamalar
    environment:
      NODE_ENV: development # Yoki production
      PORT: 3001
    networks:
      - microservices-network

  turn_server:
    # <<: *logging # Agar kerak bo'lsa
    image: coturn/coturn
    container_name: coturn_container
    restart: always
    networks:
      - microservices-network
    ports:
      - '3478:3478/tcp'
      - '3478:3478/udp'
      - '5349:5349/tcp'
      - '5349:5349/udp'
      - '49152-49200:49152-49200/udp' # Relay portlarini cheklash (turnserver.conf ga mos)
    volumes:
      - ./turn_config/turnserver.conf:/etc/coturn/turnserver.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "netstat -tulnp | grep 3478 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  mongo-data:

networks:
  microservices-network:
    driver: bridge